{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAe,kBACpCE,UAAWH,SAASC,cAAe,iBACnCG,YAAaJ,SAASC,cAAe,oBAWvC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAjBPT,EAAKI,WAAWa,IAAM,OACtBjB,EAAKI,WAAWc,KAAO,MACvBlB,EAAKK,UAAUY,IAAM,MACrBjB,EAAKK,UAAUa,KAAO,MACtBlB,EAAKM,YAAYW,IAAM,IAEvBjB,EAAKC,KAAKkB,iBAAiB,UAe3B,SAAsBC,GACpBA,EAAMC,iBAIN,IAHA,IAAIC,EAASC,SAASvB,EAAKM,YAAYkB,OACnCC,EAAQF,SAASvB,EAAKI,WAAWoB,OACjCN,EAAOK,SAASvB,EAAKK,UAAUmB,OAC1BE,EAAW,EAAGA,GAAYJ,EAAQI,GAAY,EACrDnB,EAAcmB,EAAUD,EAAQP,GAAQQ,EAAW,IAChDC,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAInDT,EAAKC,KAAKkC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector(`[name=\"delay\"]`),\n  stepInput: document.querySelector(`[name=\"step\"]`),\n  amountInput: document.querySelector(`[name=\"amount\"]`),\n};\n\nrefs.delayInput.min = '1000';\nrefs.delayInput.step = '500';\nrefs.stepInput.min = '500';\nrefs.stepInput.step = '100';\nrefs.amountInput.min = '0';\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  let amount = parseInt(refs.amountInput.value);\n  let delay = parseInt(refs.delayInput.value);\n  let step = parseInt(refs.stepInput.value);\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay + step * (position - 1))\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  refs.form.reset();\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","min","step","addEventListener","event","preventDefault","amount","parseInt","value","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.0cc01075.js.map"}